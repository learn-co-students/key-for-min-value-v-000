# prereqs: iterators, hashes, conditional logic
# Given a hash with numeric values, return the key for the smallest value

#key (value) - > key

# keys - > array

#values -> array

# min --> obj
# min{|a, b| block} --> obj

# min_by{|obj| block} -> obj
# min_by -> an_enumerator

# sort -> array
# sort{ |a, b| block} -> array

# sort_by()
# Sorts enum using a set of keys generated by mapping the values
# in enum through the given block.


grocery = {apples: 5, carrots: 7, mangoes: 3, bananas: 6}

# def key_for_min_value(grocery)
#   least_item = grocery.values.sort_by{|a,b| a <=> b}.min
#   p least_item
# end 

ice_cream= {}

def key_for_min_value(hash)
  if hash.empty?
    nil
  else
  # Iterates over the hash
  list_item = hash.each{|key, value| "Item: #{key} quantity: #{value}"}
  # Returns - {:apples=>5, :carrots=>7, :mangoes=>3, :bananas=>6}
  
  least_item = list_item.sort_by{|keys, values| values}.min_by{|keys, values| values}
  # Returns - [:mangoes, 3]
  
  least_item[0]
  end
end